name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ALIBABA_HOST }}
          username: ${{ secrets.ALIBABA_USERNAME }}
          key: ${{ secrets.ALIBABA_SSH_KEY }}
          passphrase: ${{ secrets.ALIBABA_SSH_PASSPHRASE }}
          script: |
            echo "üöÄ Starting deployment process..."
            
            # Navigate to app directory or create it
            APP_DIR="/opt/switch-ev"
            echo "üìÅ Setting up directory: $APP_DIR"
            sudo mkdir -p $APP_DIR
            sudo chown -R $USER:$USER $APP_DIR
            cd $APP_DIR
            
            # Clone or update source code with better error handling
            if [ ! -d ".git" ]; then
              echo "üì¶ Cloning repository..."
              if ! git clone https://github.com/pelePLV/cicd-switch-ev-web.git .; then
                echo "‚ùå Git clone failed! Trying with different method..."
                rm -rf * .git 2>/dev/null || true
                if ! git clone --depth 1 https://github.com/pelePLV/cicd-switch-ev-web.git temp; then
                  echo "‚ùå All git clone methods failed! Exiting..."
                  exit 1
                fi
                mv temp/* . 2>/dev/null || true
                mv temp/.* . 2>/dev/null || true
                rm -rf temp
              fi
            else
              echo "üîÑ Updating repository..."
              git fetch origin || echo "‚ö†Ô∏è Git fetch failed, continuing..."
              git reset --hard origin/main || git reset --hard HEAD
            fi
            
            # Verify source code exists
            if [ ! -f "package.json" ]; then
              echo "‚ùå Source code not found! Deployment failed."
              exit 1
            fi
            echo "‚úÖ Source code ready"
            
            # Build new Docker image locally on server
            echo "üî® Building Docker image on server..."
            if ! sudo docker build -t switch-ev:latest \
              --build-arg NEXT_PUBLIC_BACKEND_URL="${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" \
              --build-arg NEXT_PUBLIC_GOOGLE_MAPS_API_KEY="${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" \
              .; then
              echo "‚ùå Docker build failed! Rolling back to stable image..."
              # Ensure service uses working Docker Hub image
              sudo sed -i 's|switch-ev:latest|aphommasone/switch-ev:latest|g' /etc/systemd/system/switch-ev.service
              sudo sed -i 's|# Image built locally, no pull needed|ExecStartPre=/usr/bin/docker pull aphommasone/switch-ev:latest|g' /etc/systemd/system/switch-ev.service
              sudo systemctl daemon-reload
              sudo systemctl restart switch-ev
              echo "‚úÖ Rolled back to stable version"
              exit 1
            fi
            echo "‚úÖ Docker image built successfully"
            
            # Backup current service config (in case rollback needed)
            sudo cp /etc/systemd/system/switch-ev.service /etc/systemd/system/switch-ev.service.backup
            
            # Update systemd service to use local image
            echo "‚öôÔ∏è Updating systemd service..."
            sudo sed -i 's|aphommasone/switch-ev:latest|switch-ev:latest|g' /etc/systemd/system/switch-ev.service
            sudo sed -i 's|ExecStartPre=/usr/bin/docker pull.*|# Image built locally, no pull needed|g' /etc/systemd/system/switch-ev.service
            
            # Reload systemd and restart service
            echo "üîÑ Restarting service via systemd..."
            sudo systemctl daemon-reload
            sudo systemctl enable switch-ev
            
            # Stop old container gracefully
            sudo docker stop switch-ev 2>/dev/null || true
            sudo docker rm switch-ev 2>/dev/null || true
            
            # Start service
            if ! sudo systemctl restart switch-ev; then
              echo "‚ùå Service restart failed! Rolling back..."
              sudo cp /etc/systemd/system/switch-ev.service.backup /etc/systemd/system/switch-ev.service
              sudo systemctl daemon-reload
              sudo systemctl restart switch-ev
              echo "‚úÖ Rolled back to stable version"
              exit 1
            fi
            
            # Wait for service to start
            sleep 10
            
            # Check service status
            echo "üìä Service status:"
            sudo systemctl status switch-ev --no-pager -l
            
            # Check if application is responding (with retry)
            echo "üîç Health check:"
            for i in {1..5}; do
              if curl -f http://localhost:4000 > /dev/null 2>&1; then
                echo "‚úÖ Application is running!"
                break
              else
                echo "‚è≥ Attempt $i/5 - Waiting for application..."
                sleep 5
              fi
              
              if [ $i -eq 5 ]; then
                echo "‚ùå Application not responding after 5 attempts"
                echo "üîÑ Rolling back..."
                sudo cp /etc/systemd/system/switch-ev.service.backup /etc/systemd/system/switch-ev.service
                sudo systemctl daemon-reload
                sudo systemctl restart switch-ev
                echo "‚úÖ Rolled back to stable version"
                exit 1
              fi
            done
            
            # Clean up old unused images
            echo "üßπ Cleaning up old images..."
            sudo docker image prune -f
            
            echo "‚úÖ Deployment completed!"
