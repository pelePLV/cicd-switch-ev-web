name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Create lowercase image name
        id: image-name
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image-name=${{ env.REGISTRY }}/${REPO_LOWER}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image-name.outputs.image-name }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
            NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ALIBABA_HOST }}
          username: ${{ secrets.ALIBABA_USERNAME }}
          key: ${{ secrets.ALIBABA_SSH_KEY }}
          passphrase: ${{ secrets.ALIBABA_SSH_PASSPHRASE }}
          timeout: 10m
          command_timeout: 10m
          script: |
            echo "🚀 Starting deployment process..."
            
            # Define variables with lowercase conversion
            REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_NAME="ghcr.io/${REPO_OWNER}/${REPO_NAME}:latest"
            echo "📦 Target image: $IMAGE_NAME"
            
            # Login to GitHub Container Registry on server
            echo "🔐 Logging in to GitHub Container Registry..."
            if ! echo "${{ secrets.CR_PAT }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin; then
              echo "❌ Failed to login to GitHub Container Registry!"
              exit 1
            fi
            echo "✅ Successfully logged in to GitHub Container Registry"
            
            # Pull the latest image with retry logic
            echo "📥 Pulling latest Docker image..."
            for i in {1..3}; do
              if sudo docker pull "$IMAGE_NAME"; then
                echo "✅ Successfully pulled Docker image"
                break
              else
                echo "⚠️ Pull attempt $i/3 failed, retrying in 10 seconds..."
                sleep 10
                if [ $i -eq 3 ]; then
                  echo "❌ Failed to pull image after 3 attempts! Rolling back to stable version..."
                  # Use Docker Hub fallback
                  sudo sed -i 's|ghcr.io.*|aphommasone/switch-ev:latest|g' /etc/systemd/system/switch-ev.service
                  sudo sed -i 's|# Image pulled from registry|ExecStartPre=/usr/bin/docker pull aphommasone/switch-ev:latest|g' /etc/systemd/system/switch-ev.service
                  sudo systemctl daemon-reload
                  sudo systemctl restart switch-ev
                  echo "✅ Rolled back to stable Docker Hub version"
                  exit 1
                fi
              fi
            done
            
            # Backup current service config
            echo "💾 Backing up current service configuration..."
            sudo cp /etc/systemd/system/switch-ev.service /etc/systemd/system/switch-ev.service.backup
            
            # Update systemd service to use GitHub Container Registry image
            echo "⚙️ Updating systemd service configuration..."
            sudo sed -i "s|aphommasone/switch-ev:latest|$IMAGE_NAME|g" /etc/systemd/system/switch-ev.service
            sudo sed -i "s|switch-ev:latest|$IMAGE_NAME|g" /etc/systemd/system/switch-ev.service
            sudo sed -i "s|ghcr.io/.*/.*:latest|$IMAGE_NAME|g" /etc/systemd/system/switch-ev.service
            sudo sed -i "s|ExecStartPre=/usr/bin/docker pull.*|# Image pulled from registry|g" /etc/systemd/system/switch-ev.service
            
            # Show updated service configuration
            echo "📋 Updated service configuration:"
            grep -E "(ExecStart|ExecStartPre)" /etc/systemd/system/switch-ev.service
            
            # Reload systemd configuration
            echo "🔄 Reloading systemd configuration..."
            sudo systemctl daemon-reload
            sudo systemctl enable switch-ev
            
            # Stop old container gracefully
            echo "⏹️ Stopping existing container..."
            sudo docker stop switch-ev 2>/dev/null || echo "No existing container to stop"
            sudo docker rm switch-ev 2>/dev/null || echo "No existing container to remove"
            
            # Start new service
            echo "▶️ Starting service with new image..."
            if ! sudo systemctl restart switch-ev; then
              echo "❌ Service restart failed! Rolling back..."
              sudo cp /etc/systemd/system/switch-ev.service.backup /etc/systemd/system/switch-ev.service
              sudo systemctl daemon-reload
              sudo systemctl restart switch-ev
              echo "✅ Rolled back to previous version"
              exit 1
            fi
            
            # Wait for service to initialize
            echo "⏳ Waiting for service to initialize..."
            sleep 20
            
            # Check service status
            echo "📊 Service status:"
            sudo systemctl status switch-ev --no-pager -l
            
            # Check Docker container status
            echo "🐳 Container status:"
            sudo docker ps -f name=switch-ev --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}"
            
            # Extended health check
            echo "🔍 Health check (up to 2 minutes)..."
            for i in {1..8}; do
              if curl -f http://localhost:4000 > /dev/null 2>&1; then
                echo "✅ Application is responding!"
                
                # Additional content verification
                if curl -s http://localhost:4000 | grep -q "html\|doctype\|switch" -i; then
                  echo "✅ Application is serving content properly!"
                  break
                else
                  echo "⚠️ Application responding but checking content..."
                  # Show first few lines for debugging
                  curl -s http://localhost:4000 | head -3
                fi
                break
              else
                echo "⏳ Attempt $i/8 - Waiting for application... (${i}5s elapsed)"
                sleep 15
              fi
              
              if [ $i -eq 8 ]; then
                echo "❌ Application not responding after 8 attempts (2 minutes)"
                echo "🔍 Debugging information:"
                sudo docker logs switch-ev --tail 30 2>/dev/null || echo "No container logs available"
                echo "🔄 Rolling back to previous version..."
                sudo cp /etc/systemd/system/switch-ev.service.backup /etc/systemd/system/switch-ev.service
                sudo systemctl daemon-reload
                sudo systemctl restart switch-ev
                echo "✅ Rolled back to previous version"
                exit 1
              fi
            done
            
            # Clean up old images (keep last 2 versions)
            echo "🧹 Cleaning up old Docker images..."
            sudo docker images | grep -E "(ghcr.io.*${REPO_NAME}|aphommasone/switch)" | tail -n +3 | awk '{print $3}' | xargs -r sudo docker rmi 2>/dev/null || true
            sudo docker image prune -f
            
            echo "🎉 Deployment completed successfully!"
            echo "🌐 Application is available at: https://test.switchuniversal.com/"
